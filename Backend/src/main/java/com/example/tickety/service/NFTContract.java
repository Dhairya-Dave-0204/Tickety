package com.example.tickety.service;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class NFTContract extends Contract {
    public static final String BINARY = "60806040526001600d5534801561001557600080fd5b50336040518060400160405280600b81526020017f4576656e745469636b65740000000000000000000000000000000000000000008152506040518060400160405280600681526020017f5449434b4554000000000000000000000000000000000000000000000000000081525081600090816100929190610442565b5080600190816100a29190610442565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101175760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161010e9190610555565b60405180910390fd5b6101268161012c60201b60201c565b50610570565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061027357607f821691505b6020821081036102865761028561022c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026102ee7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102b1565b6102f886836102b1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061033f61033a61033584610310565b61031a565b610310565b9050919050565b6000819050919050565b61035983610324565b61036d61036582610346565b8484546102be565b825550505050565b600090565b610382610375565b61038d818484610350565b505050565b5b818110156103b1576103a660008261037a565b600181019050610393565b5050565b601f8211156103f6576103c78161028c565b6103d0846102a1565b810160208510156103df578190505b6103f36103eb856102a1565b830182610392565b50505b505050565b600082821c905092915050565b6000610419600019846008026103fb565b1980831691505092915050565b60006104328383610408565b9150826002028217905092915050565b61044b826101f2565b67ffffffffffffffff811115610464576104636101fd565b5b61046e825461025b565b6104798282856103b5565b600060209050601f8311600181146104ac576000841561049a578287015190505b6104a48582610426565b86555061050c565b601f1984166104ba8661028c565b60005b828110156104e2578489015182556001820191506020850194506020810190506104bd565b868310156104ff57848901516104fb601f891682610408565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053f82610514565b9050919050565b61054f81610534565b82525050565b600060208201905061056a6000830184610546565b92915050565b61381d8061057f6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636352211e116100f9578063b10d2e2a11610097578063d257ecbc11610071578063d257ecbc146104dc578063de9c6b8e1461050c578063e985e9c51461053c578063f2fde38b1461056c576101a9565b8063b10d2e2a14610474578063b88d4fde14610490578063c87b56dd146104ac576101a9565b806381037cb4116100d357806381037cb4146103ec5780638da5cb5b1461041c57806395d89b411461043a578063a22cb46514610458576101a9565b80636352211e1461038257806370a08231146103b2578063715018a6146103e2576101a9565b806323b872dd116101665780634c3c529a116101405780634c3c529a146102ea5780634f6ccce71461031a5780635388842c1461034a57806353dc321a14610366576101a9565b806323b872dd146102825780632f745c591461029e57806342842e0e146102ce576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc578063095ea7b31461022c57806314ef3a061461024857806318160ddd14610264575b600080fd5b6101c860048036038101906101c3919061279c565b610588565b6040516101d591906127e4565b60405180910390f35b6101e6610602565b6040516101f3919061288f565b60405180910390f35b610216600480360381019061021191906128e7565b610694565b6040516102239190612955565b60405180910390f35b6102466004803603810190610241919061299c565b6106b0565b005b610262600480360381019061025d9190612bf7565b6106c6565b005b61026c610847565b6040516102799190612c62565b60405180910390f35b61029c60048036038101906102979190612c7d565b610854565b005b6102b860048036038101906102b3919061299c565b610956565b6040516102c59190612c62565b60405180910390f35b6102e860048036038101906102e39190612c7d565b6109ff565b005b61030460048036038101906102ff9190612d06565b610a1f565b6040516103119190612c62565b60405180910390f35b610334600480360381019061032f91906128e7565b610a37565b6040516103419190612c62565b60405180910390f35b610364600480360381019061035f9190612d33565b610aad565b005b610380600480360381019061037b9190612bf7565b610b9a565b005b61039c600480360381019061039791906128e7565b610cd5565b6040516103a99190612955565b60405180910390f35b6103cc60048036038101906103c79190612d8f565b610ce7565b6040516103d99190612c62565b60405180910390f35b6103ea610da1565b005b610406600480360381019061040191906128e7565b610db5565b604051610413919061288f565b60405180910390f35b610424610e55565b6040516104319190612955565b60405180910390f35b610442610e7f565b60405161044f919061288f565b60405180910390f35b610472600480360381019061046d9190612de8565b610f11565b005b61048e60048036038101906104899190612d33565b610f27565b005b6104aa60048036038101906104a59190612ec9565b61102e565b005b6104c660048036038101906104c191906128e7565b611053565b6040516104d3919061288f565b60405180910390f35b6104f660048036038101906104f19190612f4c565b6110bc565b6040516105039190612c62565b60405180910390f35b61052660048036038101906105219190612f4c565b6110ff565b6040516105339190612955565b60405180910390f35b61055660048036038101906105519190612f95565b611192565b60405161056391906127e4565b60405180910390f35b61058660048036038101906105819190612d8f565b611226565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105fb57506105fa826112ac565b5b9050919050565b60606000805461061190613004565b80601f016020809104026020016040519081016040528092919081815260200182805461063d90613004565b801561068a5780601f1061065f5761010080835404028352916020019161068a565b820191906000526020600020905b81548152906001019060200180831161066d57829003601f168201915b5050505050905090565b600061069f8261138e565b506106a982611416565b9050919050565b6106c282826106bd611453565b61145b565b5050565b6106ce61146d565b61011881511115610714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070b906130a7565b60405180910390fd5b60005b8151811015610842576000828281518110610735576107346130c7565b5b602002602001015160405160200161074d9190613132565b6040516020818303038152906040528051906020012090506000600b600083815260200190815260200160002054146107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290613195565b60405180910390fd5b6000600d60008154809291906107d0906131e4565b9190505590506107e085826114f4565b80600b60008481526020019081526020016000208190555083838151811061080b5761080a6130c7565b5b6020026020010151600c6000838152602001908152602001600020908161083291906133d8565b5050508080600101915050610717565b505050565b6000600880549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016108bd9190612955565b60405180910390fd5b60006108da83836108d5611453565b6115ed565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610950578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610947939291906134aa565b60405180910390fd5b50505050565b600061096183610ce7565b82106109a65782826040517fa57d13dc00000000000000000000000000000000000000000000000000000000815260040161099d9291906134e1565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610a1a8383836040518060200160405280600081525061102e565b505050565b600b6020528060005260406000206000915090505481565b6000610a41610847565b8210610a87576000826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610a7e9291906134e1565b60405180910390fd5b60088281548110610a9b57610a9a6130c7565b5b90600052602060002001549050919050565b610ab561146d565b600081604051602001610ac89190613132565b6040516020818303038152906040528051906020012090506000600b60008381526020019081526020016000205414610b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d90613195565b60405180910390fd5b6000600d6000815480929190610b4b906131e4565b919050559050610b5b84826114f4565b80600b60008481526020019081526020016000208190555082600c60008381526020019081526020016000209081610b9391906133d8565b5050505050565b60005b8151811015610cd0576000600b6000848481518110610bbf57610bbe6130c7565b5b6020026020010151604051602001610bd79190613132565b60405160208183030381529060405280519060200120815260200190815260200160002054905060008103610c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3890613556565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16610c6182610cd5565b73ffffffffffffffffffffffffffffffffffffffff1614610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae906135c2565b60405180910390fd5b610cc233858361170a565b508080600101915050610b9d565b505050565b6000610ce08261138e565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d5a5760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610d519190612955565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610da961146d565b610db36000611877565b565b600c6020528060005260406000206000915090508054610dd490613004565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0090613004565b8015610e4d5780601f10610e2257610100808354040283529160200191610e4d565b820191906000526020600020905b815481529060010190602001808311610e3057829003601f168201915b505050505081565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e8e90613004565b80601f0160208091040260200160405190810160405280929190818152602001828054610eba90613004565b8015610f075780601f10610edc57610100808354040283529160200191610f07565b820191906000526020600020905b815481529060010190602001808311610eea57829003601f168201915b5050505050905090565b610f23610f1c611453565b838361193d565b5050565b6000600b600083604051602001610f3e9190613132565b60405160208183030381529060405280519060200120815260200190815260200160002054905060008103610fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9f90613556565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16610fc882610cd5565b73ffffffffffffffffffffffffffffffffffffffff161461101e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611015906135c2565b60405180910390fd5b61102933848361170a565b505050565b611039848484610854565b61104d611044611453565b85858585611aac565b50505050565b606061105e8261138e565b506000611069611c5d565b9050600081511161108957604051806020016040528060008152506110b4565b8061109384611c74565b6040516020016110a49291906135e2565b6040516020818303038152906040525b915050919050565b6000600b6000836040516020016110d39190613132565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b600080600b6000846040516020016111179190613132565b60405160208183030381529060405280519060200120815260200190815260200160002054905060008103611181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117890613652565b60405180910390fd5b61118a81610cd5565b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61122e61146d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112a05760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016112979190612955565b60405180910390fd5b6112a981611877565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061137757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611387575061138682611d42565b5b9050919050565b60008061139a83611dac565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361140d57826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016114049190612c62565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6114688383836001611de9565b505050565b611475611453565b73ffffffffffffffffffffffffffffffffffffffff16611493610e55565b73ffffffffffffffffffffffffffffffffffffffff16146114f2576114b6611453565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114e99190612955565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115665760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161155d9190612955565b60405180910390fd5b6000611574838360006115ed565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115e85760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016115df9190612955565b60405180910390fd5b505050565b6000806115fb858585611fae565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361163f5761163a846121c8565b61167e565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461167d5761167c8185612211565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036116c0576116bb846122fc565b6116ff565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146116fe576116fd85856123cd565b5b5b809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361177c5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016117739190612955565b60405180910390fd5b600061178a838360006115ed565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117fd57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016117f49190612c62565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611871578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401611868939291906134aa565b60405180910390fd5b50505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119ae57816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016119a59190612955565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a9f91906127e4565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611c56578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401611b0b94939291906136c7565b6020604051808303816000875af1925050508015611b4757506040513d601f19601f82011682018060405250810190611b449190613728565b60015b611bcb573d8060008114611b77576040519150601f19603f3d011682016040523d82523d6000602084013e611b7c565b606091505b506000815103611bc357836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611bba9190612955565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611c5457836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c4b9190612955565b60405180910390fd5b505b5050505050565b606060405180602001604052806000815250905090565b606060006001611c8384612458565b01905060008167ffffffffffffffff811115611ca257611ca16129e1565b5b6040519080825280601f01601f191660200182016040528015611cd45781602001600182028036833780820191505090505b509050600082602001820190505b600115611d37578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d2b57611d2a613755565b5b04945060008503611ce2575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611e225750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611f56576000611e328461138e565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611e9d57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611eb05750611eae8184611192565b155b15611ef257826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611ee99190612955565b60405180910390fd5b8115611f5457838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600080611fba84611dac565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611ffc57611ffb8184866125ab565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461208d5761203e600085600080611de9565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612110576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600061221c83610ce7565b90506000600760008481526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508282146122c85760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826007600083815260200190815260200160002081905550505b6007600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b600060016008805490506123109190613784565b90506000600960008481526020019081526020016000205490506000600883815481106123405761233f6130c7565b5b906000526020600020015490508060088381548110612362576123616130c7565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806123b1576123b06137b8565b5b6001900381819060005260206000200160009055905550505050565b600060016123da84610ce7565b6123e49190613784565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106124b6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816124ac576124ab613755565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106124f3576d04ee2d6d415b85acef810000000083816124e9576124e8613755565b5b0492506020810190505b662386f26fc10000831061252257662386f26fc10000838161251857612517613755565b5b0492506010810190505b6305f5e100831061254b576305f5e100838161254157612540613755565b5b0492506008810190505b612710831061257057612710838161256657612565613755565b5b0492506004810190505b60648310612593576064838161258957612588613755565b5b0492506002810190505b600a83106125a2576001810190505b80915050919050565b6125b683838361266f565b61266a57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361262b57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016126229190612c62565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016126619291906134e1565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561272757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806126e857506126e78484611192565b5b8061272657508273ffffffffffffffffffffffffffffffffffffffff1661270e83611416565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61277981612744565b811461278457600080fd5b50565b60008135905061279681612770565b92915050565b6000602082840312156127b2576127b161273a565b5b60006127c084828501612787565b91505092915050565b60008115159050919050565b6127de816127c9565b82525050565b60006020820190506127f960008301846127d5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561283957808201518184015260208101905061281e565b60008484015250505050565b6000601f19601f8301169050919050565b6000612861826127ff565b61286b818561280a565b935061287b81856020860161281b565b61288481612845565b840191505092915050565b600060208201905081810360008301526128a98184612856565b905092915050565b6000819050919050565b6128c4816128b1565b81146128cf57600080fd5b50565b6000813590506128e1816128bb565b92915050565b6000602082840312156128fd576128fc61273a565b5b600061290b848285016128d2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061293f82612914565b9050919050565b61294f81612934565b82525050565b600060208201905061296a6000830184612946565b92915050565b61297981612934565b811461298457600080fd5b50565b60008135905061299681612970565b92915050565b600080604083850312156129b3576129b261273a565b5b60006129c185828601612987565b92505060206129d2858286016128d2565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a1982612845565b810181811067ffffffffffffffff82111715612a3857612a376129e1565b5b80604052505050565b6000612a4b612730565b9050612a578282612a10565b919050565b600067ffffffffffffffff821115612a7757612a766129e1565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115612aad57612aac6129e1565b5b612ab682612845565b9050602081019050919050565b82818337600083830152505050565b6000612ae5612ae084612a92565b612a41565b905082815260208101848484011115612b0157612b00612a8d565b5b612b0c848285612ac3565b509392505050565b600082601f830112612b2957612b286129dc565b5b8135612b39848260208601612ad2565b91505092915050565b6000612b55612b5084612a5c565b612a41565b90508083825260208201905060208402830185811115612b7857612b77612a88565b5b835b81811015612bbf57803567ffffffffffffffff811115612b9d57612b9c6129dc565b5b808601612baa8982612b14565b85526020850194505050602081019050612b7a565b5050509392505050565b600082601f830112612bde57612bdd6129dc565b5b8135612bee848260208601612b42565b91505092915050565b60008060408385031215612c0e57612c0d61273a565b5b6000612c1c85828601612987565b925050602083013567ffffffffffffffff811115612c3d57612c3c61273f565b5b612c4985828601612bc9565b9150509250929050565b612c5c816128b1565b82525050565b6000602082019050612c776000830184612c53565b92915050565b600080600060608486031215612c9657612c9561273a565b5b6000612ca486828701612987565b9350506020612cb586828701612987565b9250506040612cc6868287016128d2565b9150509250925092565b6000819050919050565b612ce381612cd0565b8114612cee57600080fd5b50565b600081359050612d0081612cda565b92915050565b600060208284031215612d1c57612d1b61273a565b5b6000612d2a84828501612cf1565b91505092915050565b60008060408385031215612d4a57612d4961273a565b5b6000612d5885828601612987565b925050602083013567ffffffffffffffff811115612d7957612d7861273f565b5b612d8585828601612b14565b9150509250929050565b600060208284031215612da557612da461273a565b5b6000612db384828501612987565b91505092915050565b612dc5816127c9565b8114612dd057600080fd5b50565b600081359050612de281612dbc565b92915050565b60008060408385031215612dff57612dfe61273a565b5b6000612e0d85828601612987565b9250506020612e1e85828601612dd3565b9150509250929050565b600067ffffffffffffffff821115612e4357612e426129e1565b5b612e4c82612845565b9050602081019050919050565b6000612e6c612e6784612e28565b612a41565b905082815260208101848484011115612e8857612e87612a8d565b5b612e93848285612ac3565b509392505050565b600082601f830112612eb057612eaf6129dc565b5b8135612ec0848260208601612e59565b91505092915050565b60008060008060808587031215612ee357612ee261273a565b5b6000612ef187828801612987565b9450506020612f0287828801612987565b9350506040612f13878288016128d2565b925050606085013567ffffffffffffffff811115612f3457612f3361273f565b5b612f4087828801612e9b565b91505092959194509250565b600060208284031215612f6257612f6161273a565b5b600082013567ffffffffffffffff811115612f8057612f7f61273f565b5b612f8c84828501612b14565b91505092915050565b60008060408385031215612fac57612fab61273a565b5b6000612fba85828601612987565b9250506020612fcb85828601612987565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061301c57607f821691505b60208210810361302f5761302e612fd5565b5b50919050565b7f43616e6e6f74206d696e74206d6f7265207468616e20323830206174206f6e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b600061309160218361280a565b915061309c82613035565b604082019050919050565b600060208201905081810360008301526130c081613084565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b600061310c826127ff565b61311681856130f6565b935061312681856020860161281b565b80840191505092915050565b600061313e8284613101565b915081905092915050565b7f5365617420616c72656164792074616b656e0000000000000000000000000000600082015250565b600061317f60128361280a565b915061318a82613149565b602082019050919050565b600060208201905081810360008301526131ae81613172565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131ef826128b1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613221576132206131b5565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261328e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613251565b6132988683613251565b95508019841693508086168417925050509392505050565b6000819050919050565b60006132d56132d06132cb846128b1565b6132b0565b6128b1565b9050919050565b6000819050919050565b6132ef836132ba565b6133036132fb826132dc565b84845461325e565b825550505050565b600090565b61331861330b565b6133238184846132e6565b505050565b5b818110156133475761333c600082613310565b600181019050613329565b5050565b601f82111561338c5761335d8161322c565b61336684613241565b81016020851015613375578190505b61338961338185613241565b830182613328565b50505b505050565b600082821c905092915050565b60006133af60001984600802613391565b1980831691505092915050565b60006133c8838361339e565b9150826002028217905092915050565b6133e1826127ff565b67ffffffffffffffff8111156133fa576133f96129e1565b5b6134048254613004565b61340f82828561334b565b600060209050601f8311600181146134425760008415613430578287015190505b61343a85826133bc565b8655506134a2565b601f1984166134508661322c565b60005b8281101561347857848901518255600182019150602085019450602081019050613453565b868310156134955784890151613491601f89168261339e565b8355505b6001600288020188555050505b505050505050565b60006060820190506134bf6000830186612946565b6134cc6020830185612c53565b6134d96040830184612946565b949350505050565b60006040820190506134f66000830185612946565b6135036020830184612c53565b9392505050565b7f5365617420646f6573206e6f7420657869737400000000000000000000000000600082015250565b600061354060138361280a565b915061354b8261350a565b602082019050919050565b6000602082019050818103600083015261356f81613533565b9050919050565b7f596f7520646f206e6f74206f776e2074686973207469636b6574000000000000600082015250565b60006135ac601a8361280a565b91506135b782613576565b602082019050919050565b600060208201905081810360008301526135db8161359f565b9050919050565b60006135ee8285613101565b91506135fa8284613101565b91508190509392505050565b7f53656174206e6f742061737369676e656420746f20616e204e46540000000000600082015250565b600061363c601b8361280a565b915061364782613606565b602082019050919050565b6000602082019050818103600083015261366b8161362f565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061369982613672565b6136a3818561367d565b93506136b381856020860161281b565b6136bc81612845565b840191505092915050565b60006080820190506136dc6000830187612946565b6136e96020830186612946565b6136f66040830185612c53565b8181036060830152613708818461368e565b905095945050505050565b60008151905061372281612770565b92915050565b60006020828403121561373e5761373d61273a565b5b600061374c84828501613713565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061378f826128b1565b915061379a836128b1565b92508282039050818111156137b2576137b16131b5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122004fa811968ed82e78e0bd3a4778d35679e0dc1de1fe8b04574773bdf07bc54c964736f6c634300081a0033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BATCHMINTTICKETS = "batchMintTickets";

    public static final String FUNC_BATCHTRANSFERTICKETS = "batchTransferTickets";

    public static final String FUNC_MINTTICKET = "mintTicket";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTICKET = "transferTicket";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETOWNERBYSEAT = "getOwnerBySeat";

    public static final String FUNC_GETTOKENIDBYSEAT = "getTokenIdBySeat";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SEATTOTOKENID = "seatToTokenId";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENIDTOSEAT = "tokenIdToSeat";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected NFTContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NFTContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NFTContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NFTContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> batchMintTickets(String to, List<String> seatNumbers) {
        final Function function = new Function(
                FUNC_BATCHMINTTICKETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(seatNumbers, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> batchTransferTickets(String to, List<String> seatNumbers) {
        final Function function = new Function(
                FUNC_BATCHTRANSFERTICKETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(seatNumbers, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> mintTicket(String to, String seatNumber) {
        final Function function = new Function(
                FUNC_MINTTICKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Utf8String(seatNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTicket(String to, String seatNumber) {
        final Function function = new Function(
                FUNC_TRANSFERTICKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Utf8String(seatNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getOwnerBySeat(String seatNumber) {
        final Function function = new Function(FUNC_GETOWNERBYSEAT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(seatNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getTokenIdBySeat(String seatNumber) {
        final Function function = new Function(FUNC_GETTOKENIDBYSEAT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(seatNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> seatToTokenId(byte[] param0) {
        final Function function = new Function(FUNC_SEATTOTOKENID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final Function function = new Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenIdToSeat(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENIDTOSEAT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static NFTContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NFTContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NFTContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NFTContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NFTContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NFTContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NFTContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NFTContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<NFTContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NFTContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NFTContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NFTContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NFTContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NFTContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
